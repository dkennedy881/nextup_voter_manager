{
  "_id" : "@jimp/custom",
  "_rev" : "110-b885c6b84311a815f9ad2318c84e4306",
  "name" : "@jimp/custom",
  "description" : "Interface to customize jimp configuration",
  "dist-tags" : {
    "canary" : "0.16.2-canary.938.1059.0",
    "latest" : "0.16.1"
  },
  "versions" : {
    "0.6.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.0.tgz",
        "shasum" : "acccc248701c20007ea6f4972a1aeb55e2c2d7fb"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.0",
      "gitHead" : "ff78c045c32a9fff55f7fd92f72fa57409126485",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.0_1543433057985_0.5010079308109712"
      },
      "_nodeVersion" : "8.11.0"
    },
    "0.6.4" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.4",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.4.tgz",
        "shasum" : "eb1abbda83f13149e50e71f0c5fc78d873fb485b"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.4",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.11.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.4",
      "gitHead" : "7c9d3c817cade88d4a20422be10670d3c1528429",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.4_1556397754783_0.16836280842666818"
      },
      "_nodeVersion" : "8.11.0"
    },
    "0.6.5" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.5",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.5.tgz",
        "shasum" : "8e13f0eb68fcde194995b6755214b4a3dd776b12"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.5",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.5",
      "gitHead" : "b240287a362fdbc2baaea2a18d82c21b0777fd8c",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.5_1567472997530_0.7513222852621977"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.6.2" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.2",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.2.tgz",
        "shasum" : "97590264d2b3cfda8304a0c2abb6fcd5632c8350"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.11.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.2",
      "gitHead" : "6d52efed23e47bb6f7c27bb2ae9e119d05db4dd3",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.2_1556388039083_0.34785251337619716"
      },
      "_nodeVersion" : "8.11.0"
    },
    "0.8.1-canary.786.211.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.211.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.211.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.211.0.tgz",
        "shasum" : "da1301067c3ca28f275ab87bf0d5187d9504f8d3"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.211.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.211.0",
      "gitHead" : "14314180ede2041c8ae050d013baf39f0c8afbd1",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.211.0_1568081636542_0.5702355209837926"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.2-canary.792.332.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.332.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.332.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.332.0.tgz",
        "shasum" : "3c27b152e7f49f2a6c213b67def424e02d3a5621"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.332.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.332.0",
      "gitHead" : "3c22c39d67bb001aae84b2165e4f1f23b3cf84f2",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.332.0_1568745334200_0.6082561026199811"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.10.2-canary.875.842.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.2-canary.875.842.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.2-canary.875.842.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.2-canary.875.842.0.tgz",
        "shasum" : "171a1beea309e548d2213b602d0598170b3bcc32"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.10.2-canary.875.842.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.2-canary.875.842.0",
      "gitHead" : "0b0c586b4f487faa0c58261dcb032e983489169c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.2-canary.875.842.0_1586870710994_0.8428202733566807"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.0"
    },
    "0.9.6-canary.857.681.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.6-canary.857.681.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.6-canary.857.681.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.6-canary.857.681.0.tgz",
        "shasum" : "0207ad6af1a9530dd6db24a1419471d029f11c55"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.6-canary.857.681.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.6-canary.857.681.0",
      "gitHead" : "002d4f41ee10762e19853545cdfc08427f748303",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.6-canary.857.681.0_1584552788029_0.936826575202452"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.10.5-canary.882.886.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.5-canary.882.886.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.5-canary.882.886.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.5-canary.882.886.0.tgz",
        "shasum" : "5814d71f1e8c4347a35951f6fdf6b53f5076fe04"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.10.5-canary.882.886.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.5-canary.882.886.0",
      "gitHead" : "2d20976992dc3dcd2ced010be15a1da07604749c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.5-canary.882.886.0_1588390724994_0.6191116621640735"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.1"
    },
    "0.8.5-canary.b147e81.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5-canary.b147e81.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5-canary.b147e81.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5-canary.b147e81.0.tgz",
        "shasum" : "51aa4d181a91af10bf16a74091ac6c22e9dbd710"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.5-canary.b147e81.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.15.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5-canary.b147e81.0",
      "gitHead" : "b147e810972b2bba9bea4a132c3026ca119832e7",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5-canary.b147e81.0_1569358135852_0.6790682201725908"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.15.0"
    },
    "0.8.1-canary.789.460.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.789.460.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.789.460.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.789.460.0.tgz",
        "shasum" : "75481149bbaf68c4cd0b91e0fe0990734d1ae623"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.789.460.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.789.460.0",
      "gitHead" : "7eee535c2a838803b49844f90c4d118b8a5683b6",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.789.460.0_1569490100630_0.324776765456273"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.6-canary.858.667.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.6-canary.858.667.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.6-canary.858.667.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.6-canary.858.667.0.tgz",
        "shasum" : "e7020b6ba0196ee8a8aa03f1d1fe5a404d6fd67c"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.6-canary.858.667.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.6-canary.858.667.0",
      "gitHead" : "840d8f4c4093fe094d5257c9d9d7c47fadd76034",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.6-canary.858.667.0_1584549429322_0.2874338054197161"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.12.1-canary.892.924.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.12.1-canary.892.924.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.12.1-canary.892.924.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.12.1-canary.892.924.0.tgz",
        "shasum" : "bbe612f136ba862cd47beefab188bb4840cff004"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.12.1-canary.892.924.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.12.1-canary.892.924.0",
      "gitHead" : "6f877e86e4dc5817f4a8710a1dbf86a983aacc0f",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.12.1-canary.892.924.0_1589869214088_0.15192530003926108"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.1"
    },
    "0.10.4-canary.882.884.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.4-canary.882.884.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.4-canary.882.884.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.4-canary.882.884.0.tgz",
        "shasum" : "3b676016bf1f66b6e432da56760931da11575cc6"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.10.4-canary.882.884.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.4-canary.882.884.0",
      "gitHead" : "5a9c3fb1790f93d37ef380a2127fef7aac313db5",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.4-canary.882.884.0_1588390606739_0.7588942698634598"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.1"
    },
    "0.16.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.16.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.16.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.16.1.tgz",
        "shasum" : "28b659c59e20a1d75a0c46067bd3f4bd302cf9c5"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.16.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.16.1",
      "gitHead" : "909f06eac36ef5ba36ebb1e0853fd006c4da3560",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.16.1_1598635266656_0.9454459271986007"
      },
      "_nodeVersion" : "10.22.0"
    },
    "0.16.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.16.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.16.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.16.0.tgz",
        "shasum" : "08489092e35425c8b3964efcf6172a08d5a93556"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.16.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.16.0",
      "gitHead" : "6b013225f12739762bf946dc4a00f34bafaf61ec",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.16.0_1596846461455_0.7833194677319677"
      },
      "_nodeVersion" : "10.22.0"
    },
    "0.8.5-canary.753c2c9.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5-canary.753c2c9.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5-canary.753c2c9.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5-canary.753c2c9.0.tgz",
        "shasum" : "5775f7b1cac3cd80dc80e9bfab8a191563d6b69d"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.5-canary.753c2c9.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.15.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5-canary.753c2c9.0",
      "gitHead" : "753c2c99505ea4cc87aeb1ac9def054b52a2e90c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5-canary.753c2c9.0_1569357938900_0.7000003400949837"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.15.0"
    },
    "0.12.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.12.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.12.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.12.1.tgz",
        "shasum" : "e54d0fb2c29f4eb3b5b0bd00dc4cd25a78f48af4"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.12.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.12.1",
      "gitHead" : "942e635564e36fc243767531b4f8be036afa40b5",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.12.1_1589869840543_0.8510072438746286"
      },
      "_nodeVersion" : "10.20.1"
    },
    "0.12.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.12.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.12.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.12.0.tgz",
        "shasum" : "53e774f05c91e0ecdb09799992b8f8967f6c3b32"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.12.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.12.0",
      "gitHead" : "2b3413a12995f7f3fdfb9dfd19ba9268734c6400",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.12.0_1589675670638_0.40708470106994454"
      },
      "_nodeVersion" : "10.20.1"
    },
    "0.8.1-canary.789.301.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.789.301.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.789.301.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.789.301.0.tgz",
        "shasum" : "d7451eb1993989851d407a8356bbdfd3cf80cd99"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.789.301.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.789.301.0",
      "gitHead" : "b74e13e54badf24f2df94e7e1d1a6c960aab8ff6",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.789.301.0_1568360405597_0.8073107239995481"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.4-canary.838.613.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.4-canary.838.613.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.4-canary.838.613.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.4-canary.838.613.0.tgz",
        "shasum" : "022840c754d45839ab802f0dbc2028a46712ba0f"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.4-canary.838.613.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.4-canary.838.613.0",
      "gitHead" : "c58a4dfea857b88949d0891906c31cda66345ded",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.4-canary.838.613.0_1578583949195_0.8480275953722156"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.2-canary.794.308.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.794.308.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.794.308.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.794.308.0.tgz",
        "shasum" : "94b56247ba5c6405dd4fcee8a18ec45898b5c15e"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.794.308.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.794.308.0",
      "gitHead" : "b934a6eb4448269ef21bbeba851f9417398d1f89",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.794.308.0_1568394415342_0.8055460333040843"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.9-canary.867.792.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.9-canary.867.792.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.9-canary.867.792.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.9-canary.867.792.0.tgz",
        "shasum" : "ec448b095b9ef36f4e06a42e308414b888562155"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.9-canary.867.792.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.9-canary.867.792.0",
      "gitHead" : "e05689ace8f60a7f4d031924f06d8ccdfa5bd05b",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.9-canary.867.792.0_1585521990839_0.503047277203788"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    },
    "0.8.1-canary.791.276.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.791.276.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.791.276.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.791.276.0.tgz",
        "shasum" : "673ca0866e167ee132db7e9479d6722754897f2b"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.791.276.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.791.276.0",
      "gitHead" : "10c0813de0db0d8460b082ac9944d638a8c387fc",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.791.276.0_1568282240998_0.6774389385705328"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.5-canary.1.b147e81.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5-canary.1.b147e81.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5-canary.1.b147e81.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5-canary.1.b147e81.0.tgz",
        "shasum" : "c91b469df30259891d40313419a620c4cde51cba"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.5-canary.1.b147e81.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5-canary.1.b147e81.0",
      "gitHead" : "b147e810972b2bba9bea4a132c3026ca119832e7",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5-canary.1.b147e81.0_1569358730212_0.40865124309247425"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.4-canary.832.606.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.4-canary.832.606.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.4-canary.832.606.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.4-canary.832.606.0.tgz",
        "shasum" : "26575f7241b6b0067b74c90bd1d5988e3b4a6af3"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.4-canary.832.606.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.4-canary.832.606.0",
      "gitHead" : "b699e66246ac0d4eb6a75d13a4275a84ad3d7d85",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.4-canary.832.606.0_1577492790164_0.9998269046510411"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.16.2-canary.934.1053.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.16.2-canary.934.1053.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.16.2-canary.934.1053.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.16.2-canary.934.1053.0.tgz",
        "shasum" : "6f8b18bb14509fa2eb9792440261170c401ec624"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.16.2-canary.934.1053.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.16.2-canary.934.1053.0",
      "gitHead" : "7af955a9ed6dd3a78894ba5f6b4c893dab517057",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.16.2-canary.934.1053.0_1598635470820_0.4714524233946855"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.22.0"
    },
    "0.6.5-canary.784.124.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.5-canary.784.124.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.5-canary.784.124.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.5-canary.784.124.0.tgz",
        "shasum" : "3906b045ef09091a044d83838bb129d5a39d3f0b"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.5-canary.784.124.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.5-canary.784.124.0",
      "gitHead" : "2c1e4c04e7e0dc08526c9188009808f02bf886fd",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.5-canary.784.124.0_1567471905149_0.1671968825913237"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.3.9" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.9",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.9.tgz",
        "shasum" : "96a68efb86d45064418e03282a5fc696c969ce7c"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.9",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.9",
      "gitHead" : "cc0669daf5b35d7bb0cb9d2a07a3ab4215bbed79",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.9_1535416112508_0.027740464582327595"
      },
      "_nodeVersion" : "9.10.0"
    },
    "0.11.1-canary.891.908.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.11.1-canary.891.908.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.11.1-canary.891.908.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.11.1-canary.891.908.0.tgz",
        "shasum" : "ce6adf51aa40570c36bb7dccb45859e7df0e2108"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.11.1-canary.891.908.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.11.1-canary.891.908.0",
      "gitHead" : "8fbf0a27694e699539d5281afa06770516a5cfd4",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.11.1-canary.891.908.0_1589653412889_0.36991539508909943"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.1"
    },
    "0.5.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.5.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.5.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.5.1.tgz",
        "shasum" : "a7779c22f493b480150daa1276382a7b5344b504"
      },
      "dependencies" : {
        "@jimp/core" : "^0.5.1",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_from" : "file:jimp-custom-0.5.1.tgz",
      "_npmVersion" : "6.2.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.5.1",
      "gitHead" : "b23ab92550336eed5d4ac422564c7c63ea280c73",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.5.1_1537734362302_0.5632510888253495"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.8.0"
    },
    "0.5.2" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.5.2",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.5.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.5.2.tgz",
        "shasum" : "451e9297a18630904da6da1060b41bed8037b3e8"
      },
      "dependencies" : {
        "@jimp/core" : "^0.5.2",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_from" : "file:jimp-custom-0.5.2.tgz",
      "_npmVersion" : "6.2.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.5.2",
      "gitHead" : "206fa4a372f89b6b3ea87d73656066a0baf055d6",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.5.2_1537736053038_0.17582836045445727"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.8.0"
    },
    "0.5.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.5.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.5.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.5.0.tgz",
        "shasum" : "ffae82641f26dd85b80814459999abbe425a7aaf"
      },
      "dependencies" : {
        "@jimp/core" : "^0.5.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.5.0",
      "gitHead" : "fbbe0b7da5a9dcf8da35e2dfb2e8265ca850435c",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.5.0_1537043358203_0.2993603027920875"
      },
      "_nodeVersion" : "9.10.0"
    },
    "0.9.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.1.tgz",
        "shasum" : "71b9fb06ba1b226d4f1aafd751bb421f444798e5"
      },
      "dependencies" : {
        "@jimp/core" : "^0.9.1",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.1",
      "gitHead" : "c6f11425c0e8585a73109d61d3372612bfa3799f",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.1_1574790026312_0.8876264533761615"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.5.3" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.5.3",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.5.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.5.3.tgz",
        "shasum" : "b932241e62d628bd465541efafaaddb0a720def6"
      },
      "dependencies" : {
        "@jimp/core" : "^0.5.3",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_from" : "file:jimp-custom-0.5.3.tgz",
      "_npmVersion" : "6.2.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.5.3",
      "gitHead" : "762e7e5f8099996f7bfb580477e29a75694e564e",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.5.3_1537737276781_0.3491171415753971"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.8.0"
    },
    "0.5.4" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.5.4",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.5.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.5.4.tgz",
        "shasum" : "393338efbf15d158ecf6639cb1b196c70411fddd"
      },
      "dependencies" : {
        "@jimp/core" : "^0.5.4",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_from" : "file:jimp-custom-0.5.4.tgz",
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.5.4",
      "gitHead" : "833308a04a490b760425b9caadd6409cb345a582",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.5.4_1539325232587_0.9393521369530575"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.11.0"
    },
    "0.9.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.0.tgz",
        "shasum" : "c819647b6a347aa7a7cbf68248f9e0230edb9f3d"
      },
      "dependencies" : {
        "@jimp/core" : "^0.9.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.0",
      "gitHead" : "0591e7391f64a92084a4ce9c96a1274df6339c25",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.0_1574788080820_0.8291158231687246"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.6.7-canary.783.157.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.7-canary.783.157.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.7-canary.783.157.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.7-canary.783.157.0.tgz",
        "shasum" : "51321f60c2924581b9a1aa5a33bc1d4764638fd6"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.7-canary.783.157.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.7-canary.783.157.0",
      "gitHead" : "a1f0b247580b7bc0c94b6964b9b277e0a2e99e9e",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.7-canary.783.157.0_1567474129773_0.13358220347678773"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.2-canary.792.339.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.339.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.339.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.339.0.tgz",
        "shasum" : "c17ac2e4da4b13f9adf6551cc1cfd382993b5bd6"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.339.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.339.0",
      "gitHead" : "1596cf9eb0dfce7fdbd1c7636e613bfb5bb5f1a3",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.339.0_1568761341187_0.6166412304897517"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.9-canary.868.799.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.9-canary.868.799.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.9-canary.868.799.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.9-canary.868.799.0.tgz",
        "shasum" : "55bfe8343c5a0d7d1eccda3adc5a6031fbfced28"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.9-canary.868.799.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.9-canary.868.799.0",
      "gitHead" : "43ad540880302d7c8793ec393698d0dc2bc32e87",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.9-canary.868.799.0_1585531000795_0.0770603082280017"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    },
    "0.6.5-canary.784.118.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.5-canary.784.118.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.5-canary.784.118.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.5-canary.784.118.0.tgz",
        "shasum" : "7e202e55cbda498525198e4973661e58d7d2ab24"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.5-canary.784.118.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.5-canary.784.118.0",
      "gitHead" : "20a24e11c6ef9b5ff9ed731f9a2d356fb8142518",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.5-canary.784.118.0_1567471423183_0.6945989576912095"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.6.8-canary.783.163.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.8-canary.783.163.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.8-canary.783.163.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.8-canary.783.163.0.tgz",
        "shasum" : "9f67e9368b4aa0150d6ac4f9a48b41383ff5d952"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.8-canary.783.163.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.8-canary.783.163.0",
      "gitHead" : "7f6e1d7e6f2ccf5d862e7e97ca1b8235da2053d4",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.8-canary.783.163.0_1567486738027_0.4216078889827761"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.6.5-canary.4564f3c.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.5-canary.4564f3c.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.5-canary.4564f3c.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.5-canary.4564f3c.0.tgz",
        "shasum" : "1ad40402ba7bdcd6b66fe135a3d149dcf2f71fc6"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.5-canary.4564f3c.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v10.15.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.5-canary.4564f3c.0",
      "gitHead" : "4564f3c577d6a6f44199f0818cfe6c0d24a9daac",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.5-canary.4564f3c.0_1567468807281_0.2626572223093464"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.15.0"
    },
    "0.14.1-canary.911.993.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.14.1-canary.911.993.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.14.1-canary.911.993.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.14.1-canary.911.993.0.tgz",
        "shasum" : "246dda148c812f0113cd3d6924a0f8b05b9662cd"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.14.1-canary.911.993.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.14.1-canary.911.993.0",
      "gitHead" : "911578e80f7abb355da61c429deba739fa411661",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.14.1-canary.911.993.0_1594924367393_0.002759853277583213"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.21.0"
    },
    "0.10.4-canary.882.885.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.4-canary.882.885.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.4-canary.882.885.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.4-canary.882.885.0.tgz",
        "shasum" : "6e64451d5650327fd77f76090d63cee95d7700c8"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.10.4-canary.882.885.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.4-canary.882.885.0",
      "gitHead" : "9c962bd2c1ca4e07770dbb6469e18b3727927ac9",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.4-canary.882.885.0_1588390587082_0.49759450098478464"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.20.1"
    },
    "0.9.4-canary.841.620.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.4-canary.841.620.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.4-canary.841.620.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.4-canary.841.620.0.tgz",
        "shasum" : "a74dd805e526f32d2bcddc953db3b3d544ad2626"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.4-canary.841.620.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.4-canary.841.620.0",
      "gitHead" : "04c9ce5c5abeac1f632c376ff19a798e8f52b0e4",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.4-canary.841.620.0_1579994909088_0.24818209747225706"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.7.1-canary.770.193.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.7.1-canary.770.193.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.7.1-canary.770.193.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.7.1-canary.770.193.0.tgz",
        "shasum" : "65c24e491efe5b1a2ba509b091ab5c31eb961fef"
      },
      "dependencies" : {
        "@jimp/core" : "0.7.1-canary.770.193.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.7.1-canary.770.193.0",
      "gitHead" : "4eaccc589bda6d67853184da55c7e22c74c75676",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.7.1-canary.770.193.0_1567824549986_0.5441595133258876"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.6-canary.810.481.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.6-canary.810.481.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.6-canary.810.481.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.6-canary.810.481.0.tgz",
        "shasum" : "1b4958935c2b57acda2af511bfc0af978031395c"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.6-canary.810.481.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.6-canary.810.481.0",
      "gitHead" : "941ed08d9215f928708b7ab6a9a942a2fc5995df",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.6-canary.810.481.0_1572455756305_0.7891760044180776"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.15.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.15.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.15.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.15.0.tgz",
        "shasum" : "238e5af9036ce6559660fe251fcc9e158fa1c14f"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.15.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.15.0",
      "gitHead" : "5e34fdf5f7b63d4fa00ec8f79c3e645730ccd987",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.15.0_1596831929714_0.6380698444471209"
      },
      "_nodeVersion" : "10.22.0"
    },
    "0.11.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.11.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.11.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.11.0.tgz",
        "shasum" : "1d254f3167a82319c48487d89a1387f2cdf85ad0"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.11.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.11.0",
      "gitHead" : "ec736c9fb6aaf2b325db76819af4c3caea1f9ec8",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.11.0_1589577705795_0.26764776727992756"
      },
      "_nodeVersion" : "10.20.1"
    },
    "0.8.6-canary.815.502.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.6-canary.815.502.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.6-canary.815.502.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.6-canary.815.502.0.tgz",
        "shasum" : "d1161c271afcb4e4e971e89082b8e05ada562d83"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.8.6-canary.815.502.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.6-canary.815.502.0",
      "gitHead" : "5a68a9702462d87d579c9a54c5170d4940a2991d",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.6-canary.815.502.0_1574201647845_0.83105992174567"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.5-canary.800.426.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5-canary.800.426.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5-canary.800.426.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5-canary.800.426.0.tgz",
        "shasum" : "2ed91727802e124613785e86374b9616113b50a8"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.5-canary.800.426.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5-canary.800.426.0",
      "gitHead" : "eea6165d7a8ee65bce94db45d530aa45bba72af1",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5-canary.800.426.0_1569027231336_0.10786671583274932"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.3.6-alpha.6" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.6-alpha.6",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.6-alpha.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.6-alpha.6.tgz",
        "shasum" : "7e03d5e55b3289211f01e8fa935f04e41f78e0a0"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.6-alpha.6"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.6-alpha.6",
      "gitHead" : "c432eb631a023bf80d5457ef4673cb308d14ce59",
      "licenseText" : "The MIT License (MIT)\n\nCopyright (c) 2014 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.6-alpha.6_1535258377801_0.2369622215141134"
      }
    },
    "0.9.2-canary.815.538.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.2-canary.815.538.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.2-canary.815.538.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.2-canary.815.538.0.tgz",
        "shasum" : "c658faf64e3827d85c1dc26130740f368a04a9ae"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.2-canary.815.538.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.2-canary.815.538.0",
      "gitHead" : "7d4c8b69bc33d98b760ad1e0acbe678ed03647f1",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.2-canary.815.538.0_1574799238137_0.41534765563054843"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.14.1-canary.919.1005.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.14.1-canary.919.1005.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.14.1-canary.919.1005.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.14.1-canary.919.1005.0.tgz",
        "shasum" : "b3561489bd20e47e81ffb06401d7164e10f7a842"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.14.1-canary.919.1005.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.14.1-canary.919.1005.0",
      "gitHead" : "4e997ab650cef149810cbd3df60cee4507f588e8",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.14.1-canary.919.1005.0_1596109909727_0.1253765457131253"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.22.0"
    },
    "0.3.6-alpha.5" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.6-alpha.5",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.6-alpha.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.6-alpha.5.tgz",
        "shasum" : "641003f3cb6623a10e8ba1934714b9fd7caad176"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.6-alpha.5"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.6-alpha.5",
      "licenseText" : "The MIT License (MIT)\n\nCopyright (c) 2014 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.6-alpha.5_1535257391782_0.22202988111961708"
      }
    },
    "0.13.0-canary.899.964.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.13.0-canary.899.964.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.13.0-canary.899.964.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.13.0-canary.899.964.0.tgz",
        "shasum" : "f6207e2cf313083fbb0aa8308b89944d8c8bb7c0"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.13.0-canary.899.964.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.13.0-canary.899.964.0",
      "gitHead" : "238e21aefe491f4bb32cea2671c35d6d3e2756c9",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.13.0-canary.899.964.0_1591337075306_0.1572445176958479"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.21.0"
    },
    "0.8.6-canary.815.488.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.6-canary.815.488.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.6-canary.815.488.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.6-canary.815.488.0.tgz",
        "shasum" : "34ebab90555dd9a68551c3ee6f9f428067a30ea2"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.8.6-canary.815.488.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.6-canary.815.488.0",
      "gitHead" : "3260b0cc7bddc7360f70248e28fdd815b7d17c8c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.6-canary.815.488.0_1573939569392_0.049239895476872464"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.6.8" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.8",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.8.tgz",
        "shasum" : "0476d7b3f5da3121d98895a2e14f2899e602f2b6"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.8",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.8",
      "gitHead" : "aa937725a7db4f33c68cbab36ab5cf942f4b90ff",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.8_1567525667974_0.12754189903318447"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.9.4-canary.845.627.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.4-canary.845.627.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.4-canary.845.627.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.4-canary.845.627.0.tgz",
        "shasum" : "307b75013a886dfffbc53f8a1c2b3fa785e880eb"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.4-canary.845.627.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.4-canary.845.627.0",
      "gitHead" : "cad3ef731986df2705ef1b8526c3dfe9683eb030",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.4-canary.845.627.0_1581450646676_0.009319074912335745"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.6.6" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.6",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.6.tgz",
        "shasum" : "c62b41d2fe843f66916092e0aa8080de69e09e2d"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.6",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.6",
      "gitHead" : "72f4171b9de0bc27cdd2a014c4da726151b8da0e",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.6_1567473500243_0.8885899680095639"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.6.7" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.7",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.7.tgz",
        "shasum" : "53ff54a3562baf134e6c9d0239e40e591d924bdf"
      },
      "dependencies" : {
        "@jimp/core" : "^0.6.7",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.7",
      "gitHead" : "88b63e68275c60fe0dce3056657b845bb169065c",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.7_1567473985213_0.8076073427194757"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.4.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.4.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.4.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.4.0.tgz",
        "shasum" : "c0b801aea1413c2b827ba299523cbc2d0932197d"
      },
      "dependencies" : {
        "@jimp/core" : "^0.4.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_from" : "file:jimp-custom-0.4.0.tgz",
      "_npmVersion" : "6.2.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.4.0",
      "gitHead" : "4daa956fce81c656ffa10d814a08412ef09b7e69",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.4.0_1535929556817_0.4946136479970076"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.8.0"
    },
    "0.8.2" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2.tgz",
        "shasum" : "1048f7d46c9bf7e791ef74c09407fbb03ca2b6f7"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.2",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2",
      "gitHead" : "c4575b6fb9f25c8bad05f05541bf195da21791e6",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2_1568396047585_0.7244796260120925"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.8.3" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.3",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.3.tgz",
        "shasum" : "9aa5b1416fd3631053b168f10643d18b8a77be4f"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.3",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.3",
      "gitHead" : "42e184cf4681b71bc1594c8822be3553d152b5e2",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.3_1568849183269_0.6849554955050812"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.8.4-canary.798.377.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.4-canary.798.377.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.4-canary.798.377.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.4-canary.798.377.0.tgz",
        "shasum" : "32a4e86ccdf7637086129b82dc91ba63ea922c2d"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.4-canary.798.377.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.4-canary.798.377.0",
      "gitHead" : "44c5ed24135627bcd9ddf9fa47d3c78e4a37457e",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.4-canary.798.377.0_1568869734969_0.39998422463253624"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.0.tgz",
        "shasum" : "90bc29a938acaab5148c74141aeed3f6189b6a5c"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.0",
      "gitHead" : "11f2dcb229e4adeff449fbc0c8dee89586a576d3",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.0_1567876824480_0.681307812864602"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1-canary.786.217.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.217.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.217.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.217.0.tgz",
        "shasum" : "aed5973ce732bf11727369c9a96852ef94def9ae"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.217.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.217.0",
      "gitHead" : "f9d0b4a1a3de789557a2fedd477fbdd2a81f12c5",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.217.0_1568085608704_0.6127526206125018"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1.tgz",
        "shasum" : "f2519cb07326c2f81f11e2f5fc023dc88a9c6666"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.1",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1",
      "gitHead" : "4242e41056cdbab8080c45c22e47716864a29503",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1_1568264985205_0.38688461891121984"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.15.1-canary.924.1021.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.15.1-canary.924.1021.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.15.1-canary.924.1021.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.15.1-canary.924.1021.0.tgz",
        "shasum" : "9d115bb3ce69f8b2f4f62701407fcdb1247c2ff5"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.15.1-canary.924.1021.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.15.1-canary.924.1021.0",
      "gitHead" : "4d135221b81927042a1c8d7ae62b58cc886d39c3",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.15.1-canary.924.1021.0_1596841087078_0.5248023735342486"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.22.0"
    },
    "0.8.2-canary.792.353.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.353.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.353.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.353.0.tgz",
        "shasum" : "d4a2fcb6339222019887ab8c08033dba40f7837d"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.353.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.353.0",
      "gitHead" : "f5db61068f71f7ceef563bbd08ab0d8f78f82454",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.353.0_1568761962298_0.6614657213948472"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1-canary.786.232.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.232.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.232.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.232.0.tgz",
        "shasum" : "c47555ed6dded76dad5c977996f9fa9861e91ac2"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.232.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.232.0",
      "gitHead" : "90bc07eac498e014b3902ebaeb341f874e8f1f19",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.232.0_1568135036879_0.2323572108251417"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.16.2-canary.919.1052.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.16.2-canary.919.1052.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.16.2-canary.919.1052.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.16.2-canary.919.1052.0.tgz",
        "shasum" : "95d27bda19048a8751fa358d356f516d4705c3f8"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.16.2-canary.919.1052.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.16.2-canary.919.1052.0",
      "gitHead" : "385872c90816a6a5bb1dfec7ec88651e4b523d92",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.16.2-canary.919.1052.0_1598635406006_0.5093996413899697"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.22.0"
    },
    "0.10.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.0.tgz",
        "shasum" : "adecf5e879ca38c34e98a898e3cc2cddf76e28c3"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.10.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.0",
      "gitHead" : "c23237b41f76be00987a37484cf17dce3a243e2e",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.0_1585535855693_0.9697778563294315"
      },
      "_nodeVersion" : "10.19.0"
    },
    "0.9.3-canary.825.599.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.3-canary.825.599.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.3-canary.825.599.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.3-canary.825.599.0.tgz",
        "shasum" : "f6ddf153e2decaed26f19224b061124e5239d15e"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.3-canary.825.599.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.3-canary.825.599.0",
      "gitHead" : "a7ca135eac68c9ed228a1cd5fe535bf9cfc0a143",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.3-canary.825.599.0_1574810464529_0.1698676512996964"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.3.9-alpha.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.9-alpha.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.9-alpha.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.9-alpha.0.tgz",
        "shasum" : "74d9fbfe51ee3cb1345b13b9b4e3a94c311fed72"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.9-alpha.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.9-alpha.0",
      "gitHead" : "2c747d1244260e551a9476b960b64fd7a9c06cc4",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.9-alpha.0_1535415537675_0.042018888624317796"
      },
      "_nodeVersion" : "9.10.0"
    },
    "0.14.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.14.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.14.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.14.0.tgz",
        "shasum" : "1dbbf0094df7403f4e03bc984ed92e7458842f74"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.14.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.14.0",
      "gitHead" : "777081348caf314a5f35d871702168c86ab2ca3b",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.14.0_1593454051124_0.14847153678961766"
      },
      "_nodeVersion" : "10.21.0"
    },
    "0.10.3" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.3",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.3.tgz",
        "shasum" : "eb6201b2e8fdd83afc3d8b514538e5faa1d30980"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.10.3",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.3",
      "gitHead" : "37197106eae5c26231018dfdc0254422f6b43927",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.3_1587412877794_0.018071535624725854"
      },
      "_nodeVersion" : "10.20.1"
    },
    "0.10.2" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.2",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.2.tgz",
        "shasum" : "2d8977af7bea41b442ec8f1777bbf8392cdac129"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.10.2",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.20.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.2",
      "gitHead" : "dd7a6ba5d374d273d8ef69a1832725f6c768f817",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.2_1586879220565_0.8605973342870736"
      },
      "_nodeVersion" : "10.20.0"
    },
    "0.10.1" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.1",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.1.tgz",
        "shasum" : "1147f895272351adc3fd8192b73a2d4ccf563535"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.10.1",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.1",
      "gitHead" : "44ce60b5cc53ee60cd5c63d4dc0ecf26fd3d431e",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.1_1586110494863_0.6861012897256062"
      },
      "_nodeVersion" : "10.19.0"
    },
    "0.6.5-canary.eeb6481.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.6.5-canary.eeb6481.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.6.5-canary.eeb6481.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.6.5-canary.eeb6481.0.tgz",
        "shasum" : "18c781a951434aa5558d227b5d8843dbfeb8b016"
      },
      "dependencies" : {
        "@jimp/core" : "0.6.5-canary.eeb6481.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v10.15.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.6.5-canary.eeb6481.0",
      "gitHead" : "eeb6481c32c72c7082efa5fa9079653c513d1b27",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.6.5-canary.eeb6481.0_1567469834391_0.9776416158404675"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return and array whose first element is the mime type and second element is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: [MIME_TYPE, ['spec', 'special']],\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.15.0"
    },
    "0.8.2-canary.792.360.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.360.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.360.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.360.0.tgz",
        "shasum" : "fda10b756e147b4c00c1e304bd9bb3611096eefd"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.360.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.360.0",
      "gitHead" : "29f7a9f2419b2780dd6eeb350f6a1f500b00e1ae",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.360.0_1568840850994_0.11756715699700337"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1-canary.786.262.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.262.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.262.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.262.0.tgz",
        "shasum" : "1aa1e627993a5bb7c66074e2e27093865f66f9ae"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.262.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.262.0",
      "gitHead" : "b0d5448f47e49a8ee4992dc53166a8ee32c8ee19",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.262.0_1568176445242_0.8282835233505306"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.3-canary.825.584.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.3-canary.825.584.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.3-canary.825.584.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.3-canary.825.584.0.tgz",
        "shasum" : "410de6309fa7db16514a2dc406047e5b1c425304"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.3-canary.825.584.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.3-canary.825.584.0",
      "gitHead" : "b52405f03464a37390ce846c22e34755347c48d2",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.3-canary.825.584.0_1574809722186_0.7181527412818265"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.16.2-canary.938.1059.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.16.2-canary.938.1059.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.16.2-canary.938.1059.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.16.2-canary.938.1059.0.tgz",
        "shasum" : "c648885ffdff022d4aee6d0298aaf70052c9fb44"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.16.2-canary.938.1059.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.22.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.16.2-canary.938.1059.0",
      "gitHead" : "eac009a0e11a8dcc573ebbcb1793e49b8041a977",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.16.2-canary.938.1059.0_1599483504346_0.13902476375274375"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.22.0"
    },
    "0.8.2-canary.792.349.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.349.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.349.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.349.0.tgz",
        "shasum" : "41efec47c978f09fae63758ac6ad1ca35931de41"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.349.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.349.0",
      "gitHead" : "c59bd6acbcca0653ca442e8be2e8aba892a7a0ca",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.349.0_1568761796324_0.1229817029770659"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.5" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.5",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.5.tgz",
        "shasum" : "e1a637562580aee30a19dd86e41514e8a7a98d94"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.5",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.5",
      "gitHead" : "ecadad6b337ee78e23d683e9560a4182e43d9820",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.5_1583276370426_0.8670867938998577"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.9.6" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.6",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.6.tgz",
        "shasum" : "3d8a19d6ed717f0f1aa3f1b8f42fa374f43bc715"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.6",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.6",
      "gitHead" : "231e9e39e315aa0821d259553877e54d57e9dd6f",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.6_1584555001997_0.4179953029749359"
      },
      "_nodeVersion" : "10.19.0"
    },
    "0.9.3" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.3",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.3.tgz",
        "shasum" : "b49dfe1d6b24e62fd4101a7db77104024c8d97e8"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.3",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.3",
      "gitHead" : "bcba912d188def2e9e5d2ee75109d8dfbc9fab24",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.3_1574810339529_0.7021534529560527"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.9.4" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.4",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.4.tgz",
        "shasum" : "f44596655ad014d8d0ca80470e9e1a1833ec5dda"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.4",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.4",
      "gitHead" : "a1120faa4dbe2a3ab3a465b93e5db254ec2876f2",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.4_1583275261279_0.770171358588287"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.8.2-canary.792.290.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.290.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.290.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.290.0.tgz",
        "shasum" : "337e638ff2fdc240d836b60c43bb5b96be7db22d"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.290.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.290.0",
      "gitHead" : "9cdd4f81472c738ea7c29a55f5650cfc8bdae919",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.290.0_1568309115456_0.35782997871218947"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.7-canary.854.725.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.7-canary.854.725.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.7-canary.854.725.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.7-canary.854.725.0.tgz",
        "shasum" : "73e4a5ad024de7aeb13b0ff01c028340c55330e0"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.7-canary.854.725.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.7-canary.854.725.0",
      "gitHead" : "f94b1383a55f945130aebfa1bdecf8c2501306d5",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.7-canary.854.725.0_1584555623647_0.412825999729751"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    },
    "0.9.7" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.7",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.7.tgz",
        "shasum" : "dfe338b461771b99b92a2a2b77207756fa3ce904"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.7",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.7",
      "gitHead" : "c56d6f758a2404b3c4ef6682c7419cc42a0887c0",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.7_1585330898673_0.580542035087773"
      },
      "_nodeVersion" : "10.19.0"
    },
    "0.9.8" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.8",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.8.tgz",
        "shasum" : "1e9d904b1b05aa22b00b899baba2be7c0704a5d1"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.9.8",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.8",
      "gitHead" : "3a3df33f1fcf11899075ba87811d7c3d4f9bed21",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.8_1585354444962_0.8448947258787398"
      },
      "_nodeVersion" : "10.19.0"
    },
    "0.7.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.7.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.7.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.7.0.tgz",
        "shasum" : "19e8eb601e10c970b402a8ebebc1eb901a10859d"
      },
      "dependencies" : {
        "@jimp/core" : "^0.7.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.7.0",
      "gitHead" : "cd5ff6a525c0e547fb0b8172a864d98c4ed7d5fd",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.7.0_1567785212289_0.6318121092366107"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.3.7" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.7",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.7.tgz",
        "shasum" : "95bdfe223330d6998bd0794147cf0a8f92e02d00"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.7",
      "licenseText" : "The MIT License (MIT)\n\nCopyright (c) 2014 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.7_1535262204613_0.5114007916939416"
      }
    },
    "0.3.8" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.3.8",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.3.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.3.8.tgz",
        "shasum" : "e79e9b4b1261b4ae3cb012f6d38340aebc555251"
      },
      "dependencies" : {
        "@jimp/core" : "^0.3.8"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.3.8",
      "gitHead" : "e04f0bb3d755b18136b00ccefc02497b7581a828",
      "licenseText" : "The MIT License (MIT)\n\nCopyright (c) 2014 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.3.8_1535392930927_0.8075314931022766"
      }
    },
    "0.9.6-canary.860.700.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.6-canary.860.700.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.6-canary.860.700.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.6-canary.860.700.0.tgz",
        "shasum" : "9013f27b6e23f82d4b475519e176a889162430ca"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.6-canary.860.700.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.6-canary.860.700.0",
      "gitHead" : "b1ed4600f773ec54230e878c02c21730211f8d2a",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.6-canary.860.700.0_1584554723189_0.8884605879128433"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    },
    "0.8.1-canary.791.466.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.791.466.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.791.466.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.791.466.0.tgz",
        "shasum" : "e2fb1f40b534b1bfcc92a215aaacb44a92884654"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.791.466.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.791.466.0",
      "gitHead" : "7954b0296d1da7ae878ce21b114d831575e2dfac",
      "types" : "index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.791.466.0_1570439698630_0.19005221196835675"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.5-canary.799.447.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5-canary.799.447.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5-canary.799.447.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5-canary.799.447.0.tgz",
        "shasum" : "781deca7bb4aa4cc848cc2a4060f0a6ccb48f8af"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.5-canary.799.447.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5-canary.799.447.0",
      "gitHead" : "15e06a23a3c1472e0610162322d67763962d8ffd",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5-canary.799.447.0_1569359413205_0.7977205470076763"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.2-canary.792.283.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.2-canary.792.283.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.2-canary.792.283.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.2-canary.792.283.0.tgz",
        "shasum" : "f06905ead796cfa6d3aecfc7662630fd94f74070"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.2-canary.792.283.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.2-canary.792.283.0",
      "gitHead" : "72d08007f8ea0c5fe4de64e357948b758e598699",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.2-canary.792.283.0_1568301709915_0.0460481332749858"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.14.0-canary.904.976.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.14.0-canary.904.976.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.14.0-canary.904.976.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.14.0-canary.904.976.0.tgz",
        "shasum" : "0dcace28b61d938fc3685e86f1c393d892c4b603"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.14.0-canary.904.976.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.14.0-canary.904.976.0",
      "gitHead" : "500856b2be239da7e2d0aee2d9ba9c198ff57a5c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.14.0-canary.904.976.0_1593447713030_0.7354329774581383"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.21.0"
    },
    "0.13.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.13.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.13.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.13.0.tgz",
        "shasum" : "bc7b2568e73eea1e1c15260b7283d7d099630881"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "^0.13.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.13.0",
      "gitHead" : "a29b6686e3084e6d57dc643c351979a83af9352c",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.13.0_1591337050954_0.32639925095483746"
      },
      "_nodeVersion" : "10.21.0"
    },
    "0.8.6-canary.818.495.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.6-canary.818.495.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.6-canary.818.495.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.6-canary.818.495.0.tgz",
        "shasum" : "982dae4c8d6c08897faa18ddf1a1e818cd7985bc"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.6-canary.818.495.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.6-canary.818.495.0",
      "gitHead" : "3b326196faede3b9d88e1e9a37305cbcba7151d8",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.6-canary.818.495.0_1574198418948_0.45139470184980723"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1-canary.786.223.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.223.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.223.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.223.0.tgz",
        "shasum" : "5065f5909a6edfe53323731606ff104c68d5ae89"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.223.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.223.0",
      "gitHead" : "62486b053cb9cc408422e1b131813927d87edbbe",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.223.0_1568100890155_0.04632625000687107"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.8.1-canary.786.242.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.1-canary.786.242.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.1-canary.786.242.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.1-canary.786.242.0.tgz",
        "shasum" : "ddd6a4c6da9b82838445972d949fd769aa7bc4e3"
      },
      "dependencies" : {
        "@jimp/core" : "0.8.1-canary.786.242.0",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.1-canary.786.242.0",
      "gitHead" : "688195a6958d089e764c1cb3a874b7f7e18fa5e3",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.1-canary.786.242.0_1568161324920_0.2563903536799681"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.14.1"
    },
    "0.9.8-canary.866.767.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.9.8-canary.866.767.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.9.8-canary.866.767.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.9.8-canary.866.767.0.tgz",
        "shasum" : "45e05dda4857461ca4e1b5e0311d96b5b4a52738"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.9.8-canary.866.767.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.9.8-canary.866.767.0",
      "gitHead" : "b327d64410808e2be428568d217439b8e17e1d08",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.9.8-canary.866.767.0_1585349054573_0.6588917341049274"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    },
    "0.8.4" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.4",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.4.tgz",
        "shasum" : "abd61281ce12194ae23046ee71d60b754b515bc8"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.4",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.4",
      "gitHead" : "ee5a809cae7cb7cc8c017e2eca935e17fd6bb5d4",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.4_1568996679717_0.9521259956207553"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.12.2-canary.899.952.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.12.2-canary.899.952.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.12.2-canary.899.952.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.12.2-canary.899.952.0.tgz",
        "shasum" : "98ba64b47ee08789ffc53af1a0fc98688f1b718b"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.12.2-canary.899.952.0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.21.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.12.2-canary.899.952.0",
      "gitHead" : "71319029e254af5900a70fe584994f086cba6766",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.12.2-canary.899.952.0_1591334135475_0.5916540084223076"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.21.0"
    },
    "0.8.5" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.8.5",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.8.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.8.5.tgz",
        "shasum" : "68131a5d7e8776d3aafc5aa7ba207405fde5c361"
      },
      "dependencies" : {
        "@jimp/core" : "^0.8.5",
        "core-js" : "^2.5.7"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v8.14.1+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.8.5",
      "gitHead" : "60b635dd77b6ea900043d81d09a12ff82fd14fd0",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.8.5_1571431947370_0.9245472229992546"
      },
      "_nodeVersion" : "8.14.1"
    },
    "0.10.1-canary.870.821.0" : {
      "name" : "@jimp/custom",
      "description" : "Interface to customize jimp configuration",
      "version" : "0.10.1-canary.870.821.0",
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/@jimp/custom/-/custom-0.10.1-canary.870.821.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2F%40jimp%2Fcustom%2F-%2Fcustom-0.10.1-canary.870.821.0.tgz",
        "shasum" : "781e7f55795e2d286b6b763f10ebf2fe8879a5ba"
      },
      "dependencies" : {
        "@babel/runtime" : "^7.7.2",
        "@jimp/core" : "0.10.1-canary.870.821.0",
        "core-js" : "^3.4.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "build" : "npm run build:node:production && npm run build:module",
        "build:watch" : "npm run build:node:debug -- -- --watch --verbose",
        "build:debug" : "npm run build:node:debug",
        "build:module" : "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
        "build:node" : "babel src -d dist --source-maps --config-file ../../babel.config.js",
        "build:node:debug" : "cross-env BABEL_ENV=development npm run build:node",
        "build:node:production" : "cross-env BABEL_ENV=production npm run build:node"
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v10.19.0+x64 (linux)",
      "_npmUser" : {
        "name" : "alisowski",
        "email" : "lisowski54@gmail.com"
      },
      "_id" : "@jimp/custom@0.10.1-canary.870.821.0",
      "gitHead" : "f36f13dbe9b849efa0202e5019a991cd5d730298",
      "types" : "types/index.d.ts",
      "module" : "es/index.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/custom_0.10.1-canary.870.821.0_1586083995032_0.01503814758918387"
      },
      "readme" : "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/custom</h1>\n  <p>Configure jimp with types and plugins.</p>\n</div>\n\n## Useful Defaults\n\nThe following wil configure a `jimp` instance with the same functionality as the main `jimp` package.\n\n```js\nimport configure from '@jimp/custom';\n// all of jimp's default types\nimport types from '@jimp/types';\n// all of jimp's default types\nimport plugins from '@jimp/plugins';\n\nconfigure({\n  types: [types],\n  plugins: [plugins]\n});\n```\n\n## Available Methods\n\n### configure\n\nTakes a Jimp configuration and applies it to `@jimp/core`.\n\nSample Jimp configuration:\n\n```js\nimport types from '@jimp/types';\n\nimport bmp from '@jimp/bmp';\nimport jpeg from '@jimp/types';\n...\n\nconfigure({\n  types: [types]\n})\n\n// or\n\nconfigure({\n  types: [bmp, jpeg, ...]\n})\n```\n\n#### Extending Jimp Further\n\nYou can use configure to add more types and plugins to a jimp multiple times.\n\n```js\nlet jimp = configure({\n  types: [bmp]\n});\n\njimp = configure(\n  {\n    types: [jpeg]\n  },\n  jimp\n);\n```\n\n## Type Definition\n\nTo define a new Jimp image type write a function the takes the current Jimp configuration. In this function you can extend Jimp's internal data structures.\n\nThis function must return an object whose key is the mime type and value is an array of valid file extensions.\n\n```js\nconst special = require('special-js');\n\nconst MIME_TYPE = 'image/special';\n\nexport default () => ({\n  mime: {[MIME_TYPE], ['spec', 'special']},\n\n  constants: {\n    MIME_SPECIAL: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: data => special.decode(data)\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => special.encode(image.bitmap)\n  }\n});\n```\n\n### Constants\n\nA jimp image type can expose as many constants as it wants. Each jimp type is required to expose a mime type.\n\n```js\nconstants: {\n  MIME_SPECIAL: MIME_TYPE\n},\n```\n\n### hasAlpha\n\nA image type can define whether it supports an alpha channel.\n\n```js\nhasAlpha: {\n  MIME_SPECIAL: true\n},\n```\n\n### Decoder\n\nA function that when supplied with a buffer should return a bitmap with height and width.\n\n```js\ndecoders: {\n  [MIME_TYPE]: data => special.decode(data)\n},\n```\n\n### Encoder\n\nA function that when supplied with a Jimp image should return an encoded buffer.\n\n```js\nencoders: {\n  [MIME_TYPE]: image => special.encode(image.bitmap)\n}\n```\n\n### Class\n\nAdd class properties and function to the Jimp constructor.\n\n```js\nclass: {\n  _quality: 100,\n  quality: function(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be a number', cb);\n    }\n\n    if (n < 0 || n > 100) {\n      return throwError.call(this, 'n must be a number 0 - 100', cb);\n    }\n\n    this._quality = Math.round(n);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n};\n```\n\n## Plugin Definition\n\nDefining a plugin has access to all the same things in the type definition. Mainly plugins use just the `constants` and `class` config options.\n\nBelow is the `invert` plugin. If a plugin doesn return an object with `constants` and `class`, all keys are treated as class functions.\n\n```js\nimport { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.19.0"
    }
  },
  "readme" : "",
  "time" : {
    "0.6.0" : "2018-11-28T19:24:18.086Z",
    "0.6.4" : "2019-04-27T20:42:34.946Z",
    "0.6.5" : "2019-09-03T01:09:57.694Z",
    "0.6.2" : "2019-04-27T18:00:39.259Z",
    "0.8.1-canary.786.211.0" : "2019-09-10T02:13:56.663Z",
    "0.8.2-canary.792.332.0" : "2019-09-17T18:35:34.295Z",
    "0.10.2-canary.875.842.0" : "2020-04-14T13:25:11.169Z",
    "0.9.6-canary.857.681.0" : "2020-03-18T17:33:08.192Z",
    "0.10.5-canary.882.886.0" : "2020-05-02T03:38:45.191Z",
    "0.8.5-canary.b147e81.0" : "2019-09-24T20:48:55.990Z",
    "0.8.1-canary.789.460.0" : "2019-09-26T09:28:20.762Z",
    "0.9.6-canary.858.667.0" : "2020-03-18T16:37:09.529Z",
    "0.12.1-canary.892.924.0" : "2020-05-19T06:20:14.217Z",
    "0.10.4-canary.882.884.0" : "2020-05-02T03:36:47.203Z",
    "0.16.1" : "2020-08-28T17:21:06.816Z",
    "0.16.0" : "2020-08-08T00:27:41.637Z",
    "0.8.5-canary.753c2c9.0" : "2019-09-24T20:45:46.886Z",
    "0.12.1" : "2020-05-19T06:30:40.651Z",
    "0.12.0" : "2020-05-17T00:34:30.733Z",
    "0.8.1-canary.789.301.0" : "2019-09-13T07:40:05.721Z",
    "0.9.4-canary.838.613.0" : "2020-01-09T15:32:29.317Z",
    "0.8.2-canary.794.308.0" : "2019-09-13T17:06:55.464Z",
    "0.9.9-canary.867.792.0" : "2020-03-29T22:46:31.011Z",
    "0.8.1-canary.791.276.0" : "2019-09-12T09:57:21.110Z",
    "0.8.5-canary.1.b147e81.0" : "2019-09-24T20:58:50.396Z",
    "0.9.4-canary.832.606.0" : "2019-12-28T00:26:30.346Z",
    "0.16.2-canary.934.1053.0" : "2020-08-28T17:24:30.926Z",
    "0.6.5-canary.784.124.0" : "2019-09-03T00:51:45.405Z",
    "0.3.9" : "2018-08-28T00:28:32.581Z",
    "0.11.1-canary.891.908.0" : "2020-05-16T18:23:33.037Z",
    "0.5.1" : "2018-09-23T20:26:02.435Z",
    "0.5.2" : "2018-09-23T20:54:13.149Z",
    "0.5.0" : "2018-09-15T20:29:18.302Z",
    "0.9.1" : "2019-11-26T17:40:26.543Z",
    "0.5.3" : "2018-09-23T21:14:36.937Z",
    "0.5.4" : "2018-10-12T06:20:32.770Z",
    "0.9.0" : "2019-11-26T17:08:00.918Z",
    "0.6.7-canary.783.157.0" : "2019-09-03T01:28:49.892Z",
    "0.8.2-canary.792.339.0" : "2019-09-17T23:02:21.312Z",
    "0.9.9-canary.868.799.0" : "2020-03-30T01:16:40.978Z",
    "0.6.5-canary.784.118.0" : "2019-09-03T00:43:43.298Z",
    "0.6.8-canary.783.163.0" : "2019-09-03T04:58:58.158Z",
    "0.6.5-canary.4564f3c.0" : "2019-09-03T00:00:07.428Z",
    "0.14.1-canary.911.993.0" : "2020-07-16T18:32:47.497Z",
    "0.10.4-canary.882.885.0" : "2020-05-02T03:36:27.177Z",
    "0.9.4-canary.841.620.0" : "2020-01-25T23:28:29.221Z",
    "0.7.1-canary.770.193.0" : "2019-09-07T02:49:10.164Z",
    "0.8.6-canary.810.481.0" : "2019-10-30T17:15:56.414Z",
    "0.15.0" : "2020-08-07T20:25:29.848Z",
    "0.11.0" : "2020-05-15T21:21:45.897Z",
    "0.8.6-canary.815.502.0" : "2019-11-19T22:14:08.028Z",
    "0.8.5-canary.800.426.0" : "2019-09-21T00:53:51.450Z",
    "0.3.6-alpha.6" : "2018-08-26T04:39:37.880Z",
    "0.9.2-canary.815.538.0" : "2019-11-26T20:13:58.271Z",
    "0.14.1-canary.919.1005.0" : "2020-07-30T11:51:49.867Z",
    "0.3.6-alpha.5" : "2018-08-26T04:23:11.891Z",
    "0.13.0-canary.899.964.0" : "2020-06-05T06:04:35.508Z",
    "0.8.6-canary.815.488.0" : "2019-11-16T21:26:09.543Z",
    "0.6.8" : "2019-09-03T15:47:48.103Z",
    "0.9.4-canary.845.627.0" : "2020-02-11T19:50:46.788Z",
    "0.6.6" : "2019-09-03T01:18:20.371Z",
    "0.6.7" : "2019-09-03T01:26:25.425Z",
    "0.4.0" : "2018-09-02T23:05:56.996Z",
    "0.8.2" : "2019-09-13T17:34:08.032Z",
    "0.8.3" : "2019-09-18T23:26:23.381Z",
    "0.8.4-canary.798.377.0" : "2019-09-19T05:08:55.132Z",
    "0.8.0" : "2019-09-07T17:20:24.641Z",
    "0.8.1-canary.786.217.0" : "2019-09-10T03:20:08.871Z",
    "0.8.1" : "2019-09-12T05:09:45.330Z",
    "0.15.1-canary.924.1021.0" : "2020-08-07T22:58:07.320Z",
    "0.8.2-canary.792.353.0" : "2019-09-17T23:12:42.667Z",
    "0.8.1-canary.786.232.0" : "2019-09-10T17:03:56.969Z",
    "0.16.2-canary.919.1052.0" : "2020-08-28T17:23:26.170Z",
    "0.10.0" : "2020-03-30T02:37:35.817Z",
    "modified" : "2020-09-07T12:58:26.713Z",
    "0.9.3-canary.825.599.0" : "2019-11-26T23:21:04.642Z",
    "0.3.9-alpha.0" : "2018-08-28T00:18:57.751Z",
    "0.14.0" : "2020-06-29T18:07:31.224Z",
    "0.10.3" : "2020-04-20T20:01:17.963Z",
    "created" : "2018-08-26T04:23:11.743Z",
    "0.10.2" : "2020-04-14T15:47:00.775Z",
    "0.10.1" : "2020-04-05T18:14:54.997Z",
    "0.6.5-canary.eeb6481.0" : "2019-09-03T00:17:14.682Z",
    "0.8.2-canary.792.360.0" : "2019-09-18T21:07:31.130Z",
    "0.8.1-canary.786.262.0" : "2019-09-11T04:34:05.387Z",
    "0.9.3-canary.825.584.0" : "2019-11-26T23:08:42.274Z",
    "0.16.2-canary.938.1059.0" : "2020-09-07T12:58:24.522Z",
    "0.8.2-canary.792.349.0" : "2019-09-17T23:09:56.498Z",
    "0.9.5" : "2020-03-03T22:59:30.553Z",
    "0.9.6" : "2020-03-18T18:10:02.273Z",
    "0.9.3" : "2019-11-26T23:18:59.617Z",
    "0.9.4" : "2020-03-03T22:41:01.401Z",
    "0.8.2-canary.792.290.0" : "2019-09-12T17:25:15.598Z",
    "0.9.7-canary.854.725.0" : "2020-03-18T18:20:23.752Z",
    "0.9.7" : "2020-03-27T17:41:38.844Z",
    "0.9.8" : "2020-03-28T00:14:05.163Z",
    "0.7.0" : "2019-09-06T15:53:32.446Z",
    "0.3.7" : "2018-08-26T05:43:24.679Z",
    "0.3.8" : "2018-08-27T18:02:11.051Z",
    "0.9.6-canary.860.700.0" : "2020-03-18T18:05:23.298Z",
    "0.8.1-canary.791.466.0" : "2019-10-07T09:14:58.826Z",
    "0.8.5-canary.799.447.0" : "2019-09-24T21:10:13.385Z",
    "0.8.2-canary.792.283.0" : "2019-09-12T15:21:50.042Z",
    "0.14.0-canary.904.976.0" : "2020-06-29T16:21:53.172Z",
    "0.13.0" : "2020-06-05T06:04:11.082Z",
    "0.8.6-canary.818.495.0" : "2019-11-19T21:20:19.091Z",
    "0.8.1-canary.786.223.0" : "2019-09-10T07:34:50.246Z",
    "0.8.1-canary.786.242.0" : "2019-09-11T00:22:05.050Z",
    "0.9.8-canary.866.767.0" : "2020-03-27T22:44:14.850Z",
    "0.8.4" : "2019-09-20T16:24:39.847Z",
    "0.12.2-canary.899.952.0" : "2020-06-05T05:15:35.634Z",
    "0.8.5" : "2019-10-18T20:52:27.532Z",
    "0.10.1-canary.870.821.0" : "2020-04-05T10:53:15.172Z"
  },
  "users" : {
  },
  "readmeFilename" : "",
  "license" : "MIT"
}